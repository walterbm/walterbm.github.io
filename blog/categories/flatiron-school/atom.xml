<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: flatiron&nbsp;school | WBM Blog]]></title>
  <link href="http://walterbm.github.io/blog/categories/flatiron-school/atom.xml" rel="self"/>
  <link href="http://walterbm.github.io/"/>
  <updated>2015-07-22T02:40:23-04:00</updated>
  <id>http://walterbm.github.io/</id>
  <author>
    <name><![CDATA[Walter Beller-Morales]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Duck typing in Ruby]]></title>
    <link href="http://walterbm.github.io/blog/2015/07/21/duck-typing-in-ruby/"/>
    <updated>2015-07-21T21:37:50-04:00</updated>
    <id>http://walterbm.github.io/blog/2015/07/21/duck-typing-in-ruby</id>
    <content type="html"><![CDATA[<h2>&ldquo;If is says its a duck&hellip;well that&rsquo;s good enough for me.&rdquo;</h2>

<p>If you&rsquo;ve been working with any sort of dynamic programming language like Ruby, JavaScript, Python, etc. (or hanging around with some strange people) you might have heard the phrase: <em>&ldquo;duck typing.&rdquo;</em> So what does this esoteric jargon mean?</p>

<p>Well, in short, &ldquo;duck typing&rdquo; is the idea that the behavior or capabilities of an object should not be determined by the object&rsquo;s type but rather by the object&rsquo;s public interface.</p>

<p><img class="center" src="/images/duck.jpg" title="Quack!" ></p>

<h2>Why call it &ldquo;duck typing&rdquo;?</h2>

<p>&ldquo;Duck typing&rdquo; was coined by Alex Martelli during the delirious months after Y2K as an attempt to explain the fuzzy behavior of dynamic typing.[1] Compared to the concrete type certainty of C++ and Java, dynamic typing meant that programmers never quite knew the exact <em>type</em> of the objects they were using. In response, early converts to dynamic languages attempted to force static typing by incessantly checking an object&rsquo;s type. Martelli used a simple analogy to dissuade this behavior:</p>

<blockquote><p>Don&rsquo;t check whether it IS-a duck: check whether it QUACKS-like-a duck, WALKS-like-a duck, etc, etc, depending on exactly what subset of duck-like behavior you need to play your language-games with.</p></blockquote>

<h2>Examples of &ldquo;duck typing&rdquo; in Ruby</h2>

<p>In Ruby <em>everything</em> is an Object and nothing is statically typed. Which is to say, in Ruby the <em>type</em> of variables or methods is never declared but rather defined through behavior. This inherent flexibility is perfect for &ldquo;duck typing.&rdquo;</p>

<p>Let&rsquo;s create two classes, <code>Duck</code> and <code>Dilophosaurus</code>, to illustrate how &ldquo;duck typing&rdquo; works in Ruby. We will give the <code>Duck</code> class instance methods for <code>walk</code> and <code>quack</code>. The <code>Dilophosaurus</code> class will also get a <code>walk</code> method but it will <code>kill</code> instead of quack.
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Duck</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">walk</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">walks</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">quack</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">quacks</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;class Dilophosaurus</span>
</span><span class='line'><span class="sr">  def walk</span>
</span><span class='line'><span class="sr">    &amp;ldquo;walks&amp;rdquo;</span>
</span><span class='line'><span class="sr">  end</span>
</span><span class='line'><span class="sr">  def kill</span>
</span><span class='line'><span class="sr">    &amp;ldquo;bite!&amp;rdquo;</span>
</span><span class='line'><span class="sr">  end</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;code&gt;``</span>
</span><span class='line'><span class="sr">Obviously, a duck and a dilophosaurus are nothing alike (you&#39;ll never convince me that dinosaurs are birds, _science_) so Ruby couldn&#39;t possibly confuse an instance of a&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="no">Duck</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">with</span> <span class="n">an</span> <span class="n">instance</span> <span class="n">of</span> <span class="n">a</span><span class="o">&lt;</span><span class="sr">/code&gt;Dilophosaurus`. Right?&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="no">Let</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="n">s</span> <span class="n">try</span> <span class="n">it!</span> <span class="no">We</span> <span class="n">can</span> <span class="n">build</span> <span class="n">a</span> <span class="n">small</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">is_a_duck?</span><span class="o">&lt;</span><span class="sr">/code&gt; method to give us an idea of how Ruby is treating the two instances.&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="no">In</span> <span class="n">this</span> <span class="n">first</span> <span class="n">example</span> <span class="n">the</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">is_a_duck?</span><span class="o">&lt;</span><span class="sr">/code&gt; method simply checks whether the object passed as an argument responds to the &lt;code&gt;walk&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="nb">method</span><span class="o">.</span> <span class="no">If</span> <span class="n">it</span> <span class="n">responds</span> <span class="n">to</span> <span class="n">the</span> <span class="nb">methods</span> <span class="n">a</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="no">Duck</span><span class="o">&lt;</span><span class="sr">/code&gt; instance would respond to then it&amp;rsquo;s a &lt;code&gt;Duck&lt;/</span><span class="n">code</span><span class="o">&gt;.</span> <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="no">If</span> <span class="n">it</span> <span class="n">walks</span> <span class="n">like</span> <span class="n">a</span> <span class="n">duck</span><span class="o">&amp;</span><span class="n">hellip</span><span class="p">;</span><span class="o">&lt;</span><span class="sr">/strong&gt;&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span> <span class="n">class</span><span class="o">=</span><span class="s2">&quot;ruby&quot;</span><span class="o">&gt;</span><span class="n">daffy</span> <span class="o">=</span> <span class="no">Duck</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">dino</span> <span class="o">=</span> <span class="no">Dilophosaurus</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">is_a_duck?</span><span class="p">(</span><span class="n">animal</span><span class="p">)</span>
</span><span class='line'>  <span class="n">animal</span><span class="o">.</span><span class="n">respond_to?</span><span class="p">(</span><span class="ss">:walk</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">is_a_duck?</span><span class="p">(</span><span class="n">daffy</span><span class="p">)</span>      <span class="c1">#=&amp;gt; true</span>
</span><span class='line'><span class="n">is_a_duck?</span><span class="p">(</span><span class="n">dino</span><span class="p">)</span>       <span class="c1">#=&amp;gt; true</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="no">Since</span> <span class="n">both</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="no">Duck</span><span class="o">&lt;</span><span class="sr">/code&gt; and &lt;code&gt;Dilophosaurus&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">share</span> <span class="n">the</span> <span class="kp">public</span> <span class="nb">method</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">walk</span><span class="o">&lt;</span><span class="sr">/code&gt; Ruby simply doesn&amp;rsquo;t care that the instances come from different classes. For the purposes of &lt;code&gt;walk&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">both</span> <span class="n">objects</span> <span class="n">can</span> <span class="n">be</span> <span class="n">treated</span> <span class="n">as</span> <span class="k">if</span> <span class="n">they</span> <span class="n">were</span> <span class="n">the</span> <span class="n">same</span> <span class="n">type</span><span class="o">.</span><span class="n">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;But explicitly checking whether an object responds to a method seems overly contrived. If Ruby can handle dynamic typing so easily why not try a more realistic example.&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="no">Let</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="n">s</span> <span class="n">modify</span> <span class="n">the</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">is_a_duck?</span><span class="o">&lt;</span><span class="sr">/code&gt; method to call the &lt;code&gt;quack&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="nb">method</span> <span class="n">on</span> <span class="n">whatever</span> <span class="n">is</span> <span class="n">passed</span> <span class="n">as</span> <span class="n">an</span> <span class="n">argument</span><span class="o">.</span> <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="no">If</span> <span class="n">it</span> <span class="n">quacks</span> <span class="n">like</span> <span class="n">a</span> <span class="n">duck</span><span class="o">&amp;</span><span class="n">hellip</span><span class="p">;</span><span class="o">&lt;</span><span class="sr">/strong&gt;&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span> <span class="n">class</span><span class="o">=</span><span class="s2">&quot;ruby&quot;</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">is_a_duck?</span><span class="p">(</span><span class="n">animal</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">animal</span><span class="o">.</span><span class="n">quack</span>
</span><span class='line'>    <span class="kp">true</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">is_a_duck?</span><span class="p">(</span><span class="n">daffy</span><span class="p">)</span>       <span class="c1">#=&amp;gt; true</span>
</span><span class='line'><span class="n">is_a_duck?</span><span class="p">(</span><span class="n">dino</span><span class="p">)</span>        <span class="c1">#=&amp;gt; undefined method `quack&#39; for #&amp;lt;Dilophosaurus&amp;gt; (NoMethodError)</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="no">Not</span> <span class="n">good</span><span class="o">.</span> <span class="no">Since</span> <span class="n">the</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">dino</span><span class="o">&lt;</span><span class="sr">/code&gt; instance does not have a public method &lt;code&gt;quack&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="no">Ruby</span> <span class="n">throws</span><span class="o">-</span><span class="n">up</span> <span class="k">in</span> <span class="n">disgust</span> <span class="ow">and</span> <span class="n">the</span> <span class="n">program</span> <span class="n">breaks</span><span class="o">.</span> <span class="n">A</span> <span class="n">dinosaur</span> <span class="n">cannot</span> <span class="n">quack</span> <span class="ow">and</span> <span class="n">a</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="no">Dilophosaurus</span><span class="o">&lt;</span><span class="sr">/code&gt; instance should not be treated like a &lt;code&gt;Duck&lt;/</span><span class="n">code</span><span class="o">&gt;.</span><span class="n">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;This might seems like a trivial example but imagine the &lt;code&gt;is_a_duck?&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="nb">method</span> <span class="n">is</span> <span class="n">buried</span> <span class="n">under</span> <span class="n">thousands</span> <span class="n">of</span> <span class="n">lines</span> <span class="n">of</span> <span class="n">code</span> <span class="ow">and</span> <span class="n">executed</span> <span class="n">by</span> <span class="n">a</span> <span class="no">Kafkaesque</span> <span class="n">chain</span> <span class="n">of</span> <span class="n">callback</span> <span class="nb">methods</span><span class="o">.</span> <span class="no">In</span> <span class="n">this</span> <span class="n">nightmare</span> <span class="n">scenario</span> <span class="n">it</span> <span class="n">might</span> <span class="n">be</span> <span class="n">impossible</span> <span class="n">to</span> <span class="k">ensure</span> <span class="n">the</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">is_a_duck?</span><span class="o">&lt;</span><span class="sr">/code&gt; method is never passed a &lt;code&gt;Dilophosaurus&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">instance</span> <span class="ow">or</span> <span class="n">any</span> <span class="n">other</span> <span class="n">object</span> <span class="n">that</span> <span class="n">does</span> <span class="ow">not</span> <span class="n">respond</span> <span class="n">to</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">quack</span><span class="o">&lt;</span><span class="sr">/code&gt;.&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="no">That</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="n">s</span> <span class="n">the</span> <span class="n">danger</span> <span class="n">of</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">duck</span> <span class="n">typing</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">.</span> <span class="no">If</span> <span class="n">you</span> <span class="n">treat</span> <span class="n">all</span> <span class="n">objects</span> <span class="n">with</span> <span class="n">the</span> <span class="n">same</span> <span class="kp">public</span> <span class="nb">methods</span> <span class="n">as</span> <span class="n">being</span> <span class="n">of</span> <span class="n">the</span> <span class="n">same</span> <span class="n">type</span> <span class="n">you</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="n">ll</span> <span class="n">invariably</span> <span class="n">allow</span> <span class="n">an</span> <span class="n">object</span> <span class="n">to</span> <span class="n">pass</span> <span class="n">through</span> <span class="n">that</span> <span class="n">could</span> <span class="n">crash</span> <span class="n">your</span> <span class="n">whole</span> <span class="n">program</span><span class="o">.</span><span class="n">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;For one last example let&amp;rsquo;s see how we could force static typing in Ruby by explicitly checking the argument&amp;rsquo;s class to make sure it is a &lt;code&gt;Duck&lt;/</span><span class="n">code</span><span class="o">&gt;.</span>
</span></code></pre></td></tr></table></div></figure>ruby
def is_a_duck?(animal)
  if animal.instance_of?(Duck)
    &ldquo;it #{animal.walk} like a duck and #{animal.quack} like a duck because we made sure it was a #{animal.class}&rdquo;
  else
    false
  end
end</p>

<p>is_a_duck?(daffy)       #=> &ldquo;it walks like a duck and quacks like a duck because we made sure it was a Duck&rdquo;
is_a_duck?(dino)        #=> false
<code>``
No confusion here. But this type-certainty came at a cost. The</code>is_a_duck?<code>method will never work with anything other than</code>Duck` instances and has become completely inflexible (not to mention unnecessarily verbose). This kind of rigidity goes against Ruby&rsquo;s core philosophy and is probably best reserved for static typed languages.</p>

<h2>Why should I care about &ldquo;duck typing&rdquo;</h2>

<p>When used cautiously &ldquo;duck typing&rdquo; can be an extremely elegant design technique. Allowing the logic of your code to rely solely on public interfaces rather than the underlying objects grants your application an immense flexibility to grow and adapt over time.</p>

<p>But don&rsquo;t take my word for it. Follow the advice of the always eloquent Sandi Metz:</p>

<blockquote><p>If every object trusts all others to be what it expects at any given moment, and any object can be any kind of thing, the design possibilities are infinite. These possibilities can be used to create flexible designs that are marvels of structured creativity or, alternatively, to construct terrifying designs that are incomprehensibly chaotic.[2]</p></blockquote>

<h3>References &amp; Notes</h3>

<ul>
<li>[1] <a href="https://groups.google.com/forum/?hl=en#!msg/comp.lang.python/CCs2oJdyuzc/NYjla5HKMOIJ">The October 2000 Google Group discussion where Alex Martelli first released &ldquo;duck-typing&rdquo; into the wild</a></li>
<li>[2] <a href="http://www.poodr.com/">Please read Sandi Metz&rsquo;s Practical Object-Oriented Design in Ruby (especially Chapter 5). Sandi Metz&rsquo;s guidance is mandatory reading for anyone designing an object-oriented application</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[&amp;Blocks, &amp;Procs, &amp;Lambdas]]></title>
    <link href="http://walterbm.github.io/blog/2015/07/09/blocks-procs-and-lambdas/"/>
    <updated>2015-07-09T04:31:49-04:00</updated>
    <id>http://walterbm.github.io/blog/2015/07/09/blocks-procs-and-lambdas</id>
    <content type="html"><![CDATA[<p>Closures are technique for implementing lexical scoping.[1] They encapsulate functions, variables, and an environment. Blocks, Procs, and Lambdas are all examples of closures in Ruby.</p>

<h2>Blocks</h2>

<p>Blocks are chunks of code that respond to a <code>yield</code> statement. You&rsquo;ve definitely used Blocks before. Probably used one this morning. Most enumerator methods, like <code>each</code>,<code>map</code>, and <code>reduce</code>, accept a block as an argument.</p>

<pre><code class="ruby">['Rocko','Spunky','Heffer','Filburt'].each do |name|
  puts name
end

#=&gt; Rocko!
#=&gt; Spunky!
#=&gt; Heffer!
#=&gt; Filburt!
</code></pre>

<p>All the code between the <code>do</code> and <code>end</code> sandwich is a Block. Behind the scenes the <code>each</code> enumerator method is using a <code>yield</code> statement to pass the string into the Block we provided. If you&rsquo;ve ever seen the error: <code>no block given (yield) (LocalJumpError)</code> you&rsquo;ve encountered a method that expected a block but did not receive it. A monkey-patched example reveals the internals of how methods that expect a Block work:</p>

<pre><code class="ruby">class Array
  def monkey_each
    self.each do |string|
      yield(string)
    end
  end
end

['Rocko','Spunky','Heffer','Filburt'].monkey_each do |name|
  puts "#{name}!"
end

#=&gt; Rocko!
#=&gt; Spunky!
#=&gt; Heffer!
#=&gt; Filburt!
</code></pre>

<p>Everybody uses Blocks. They are fundamental building_blocks_ of Ruby programing.</p>

<h2>Procs</h2>

<p>Procs (short for “procedures”) are like Blocks with names. Formally, Procs are “anonymous functions” that can be represented as an object. Procs can be saved with a variable and reused throughout the program.[2] Unlike Blocks, Procs are actual objects constructed through use of the <code>Proc</code> class.</p>

<pre><code class="ruby">square_proc = Proc.new do |num|
  puts num**2
end
</code></pre>

<p>However, Procs respond to <code>.call</code> instead of <code>yield</code>.</p>

<pre><code class="ruby">class Array
  def each_with_proc(proc)
    self.each do |number|
      proc.call(number)
    end
  end
end

[2,3,4,5].each_with_proc(bang_proc)

#=&gt; 4
#=&gt; 9
#=&gt; 16
#=&gt; 25
</code></pre>

<p>Procs help your programs stay DRY. If you catch yourself using the same Block logic repeatedly within your application then store that logic in Proc to avoid repetition.</p>

<h2>Lambdas</h2>

<p>Lambdas are basically strict Procs with different  <code>return</code> behavior. Both Lambdas and Procs are instances of the <code>Proc</code> class and both act like “anonymous functions”, however, Lambdas respect “arity” (a fancy way of saying that they will break if given an incorrect number of arguments, just like methods).</p>

<pre><code class="ruby">square_lambda = lambda { |num| puts num**2 }

square_lambda.call(16)    #=&gt; 256
square_proc.call(16,4)    #=&gt; 256
square_lambda.call(16,4)  #=&gt; wrong number of arguments (2 for 1) (ArgumentError)
</code></pre>

<p>Alternatively, Lambdas can be created in what may be the most bad-ass name for obscure syntax — &ldquo;stabby lambda&rdquo;:</p>

<pre><code class="ruby">cube_lambda = -&gt;(num){ puts num**3 } 

cube_lambda.call(9)     #=&gt; 729
</code></pre>

<p>Lambdas and Procs also handle <code>return</code> statements differently. Procs interpret the <code>return</code> within the scope that called the proc. Lambdas, on the other hand, interpret the <code>return</code> within the scope of the lambda (exactly the same way a method would handle a <code>return</code>). This is might seem like an esoteric difference but can easily cause some problems.[3]</p>

<p>Ultimately, choosing between Lambdas and Procs really depends on preference. Both are perfect for encapsulating and storing code.</p>

<h2>Conclusion</h2>

<p><img class="center" src="/images/lost_control_of_my_life.gif" width="500" height="250"></p>

<h3>References &amp; Notes</h3>

<ul>
<li>[1] <a href="https://en.wikipedia.org/wiki/Closurer">Wikipedia - Closures</a></li>
<li>[2] <a href="http://ruby-doc.org/core-2.2.2/Proc.html">Official Ruby Documentation (2.2.0) for the Proc class</a></li>
<li>[3] <a href="http://www.reactive.io/tips/2008/12/21/understanding-ruby-blocks-procs-and-lambdas/">Reactive.IO has an excellent guide on blocks, procs, lambdas, and methods that covers the implication of the varying treatment of return</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Struct Instruct]]></title>
    <link href="http://walterbm.github.io/blog/2015/06/25/struct-instruct/"/>
    <updated>2015-06-25T01:03:56-04:00</updated>
    <id>http://walterbm.github.io/blog/2015/06/25/struct-instruct</id>
    <content type="html"><![CDATA[<p>Ruby is an amazingly flexible language. For almost every need Ruby provides the tools to craft an elegant and precise solution. Within Ruby is a digital toolshed powerful enough to build massive web application and precise enough to be wielded as a scalpel. Among the many tools available are <code>Struct</code>s.</p>

<h2>What are Structs?</h2>

<p>Despite their archaic name, Structs are simple and very useful. Structs provide a convenient way to bundle a few attributes together without having to explicitly write a class.[1] Basically, Structs are mini-classes with implicit data accessor methods. A Struct can serve as an elegant way to compartmentalize data within a class or serve as a way to build simple data structures without the overhead of a full-grown class.</p>

<h2>How to use a Struct</h2>

<p>Struct construction in Ruby is fairly simple.
<code>ruby
Subway = Struct.new(:name, :line)
</code>
Generally a Struct is manipulated by calling methods the same way a class or other similar object would be used.
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">stop</span> <span class="o">=</span> <span class="no">Subway</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="no">Grand</span> <span class="no">Central</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="n">stop</span><span class="o">.</span><span class="n">name</span>             <span class="c1">#=&gt; &amp;ldquo;Grand Central&amp;rdquo;</span>
</span><span class='line'><span class="n">stop</span><span class="o">.</span><span class="n">line</span>             <span class="c1">#=&gt; 5&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">stop</span><span class="o">.</span><span class="n">line</span> <span class="o">=</span> <span class="mi">4</span>
</span><span class='line'><span class="n">stop</span><span class="o">.</span><span class="n">line</span>             <span class="c1">#=&gt; 4</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="no">However</span><span class="p">,</span> <span class="n">the</span> <span class="n">strange</span> <span class="n">powers</span> <span class="n">of</span> <span class="n">a</span> <span class="no">Struct</span> <span class="n">allow</span> <span class="n">it</span> <span class="n">to</span> <span class="n">also</span> <span class="n">be</span> <span class="n">used</span>  <span class="k">in</span> <span class="n">a</span> <span class="nb">hash</span><span class="o">-</span><span class="n">like</span> <span class="n">manner</span><span class="o">.</span> <span class="no">Through</span> <span class="n">this</span> <span class="n">interface</span> <span class="n">symbols</span> <span class="ow">and</span> <span class="n">strings</span> <span class="n">can</span> <span class="n">be</span> <span class="n">used</span> <span class="n">interchangeably</span> <span class="n">as</span> <span class="n">keys</span><span class="o">.</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;ruby</span>
</span><span class='line'><span class="sr">stop[:name]           #=&gt; &amp;ldquo;Grand Central&amp;rdquo;</span>
</span><span class='line'><span class="sr">stop[&amp;ldquo;line&amp;rdquo;]          #=&gt; 4&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">stop</span><span class="o">[&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="nb">name</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">]</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="mi">23</span><span class="n">rd</span> <span class="no">Street</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'><span class="n">stop</span><span class="o">[</span><span class="ss">:line</span><span class="o">]</span> <span class="o">=</span> <span class="mi">6</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;But wait, that’s not all. For the low price of $0.00 Structs also allow you to define custom Struct methods.</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;Email = Struct.new(:name,:domain) do |email|</span>
</span><span class='line'><span class="sr">  def address</span>
</span><span class='line'><span class="sr">    &amp;ldquo;</span><span class="si">#{</span><span class="nb">name</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="err">‘</span> <span class="err">‘</span><span class="p">,</span><span class="err">’</span><span class="n">_</span><span class="err">’</span><span class="p">)</span><span class="si">}</span><span class="sr">@</span><span class="si">#{</span><span class="n">domain</span><span class="si">}</span><span class="sr">&amp;rdquo;</span>
</span><span class='line'><span class="sr">  end</span>
</span><span class='line'><span class="sr">end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">email_account</span> <span class="o">=</span> <span class="no">Email</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">walter</span> <span class="n">beller</span> <span class="n">morales</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">arpanet</span><span class="o">.</span><span class="n">com</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span>
</span><span class='line'><span class="n">email_account</span><span class="o">.</span><span class="n">address</span> <span class="c1">#=&gt; &amp;ldquo;&lt;a href=&quot;&amp;#x6d;&amp;#x61;&amp;#x69;&amp;#x6c;&amp;#116;&amp;#111;&amp;#x3a;&amp;#119;&amp;#x61;&amp;#108;&amp;#116;&amp;#101;&amp;#x72;&amp;#95;&amp;#x62;&amp;#101;&amp;#108;&amp;#108;&amp;#101;&amp;#114;&amp;#95;&amp;#x6d;&amp;#111;&amp;#114;&amp;#97;&amp;#108;&amp;#x65;&amp;#115;&amp;#64;&amp;#x61;&amp;#x72;&amp;#x70;&amp;#97;&amp;#110;&amp;#x65;&amp;#116;&amp;#46;&amp;#99;&amp;#111;&amp;#x6d;&quot;&gt;&amp;#x77;&amp;#x61;&amp;#x6c;&amp;#116;&amp;#x65;&amp;#114;&amp;#95;&amp;#98;&amp;#x65;&amp;#x6c;&amp;#108;&amp;#x65;&amp;#114;&amp;#x5f;&amp;#x6d;&amp;#111;&amp;#x72;&amp;#97;&amp;#108;&amp;#x65;&amp;#x73;&amp;#x40;&amp;#x61;&amp;#x72;&amp;#x70;&amp;#97;&amp;#x6e;&amp;#x65;&amp;#116;&amp;#46;&amp;#99;&amp;#x6f;&amp;#x6d;&lt;/a&gt;&amp;rdquo;</span>
</span></code></pre></td></tr></table></div></figure>
Truly, Structs are a strange and powerful beast.</p>

<p>This short overview only covers the fundamentals. Structs provide much more functionality including value-equality and access to all the enumerable methods.[2]</p>

<h2>Why use a Struct?</h2>

<p>Structs are ideal for following the guiding mantra of object-oriented design: the <strong>single responsibility principal</strong>. A Struct can be used within classes to normalize the internal data structure or to avoid redundancies. An ordinary class would need superfluous attribute readers and writers before it could replicate the functionality of a Struct.</p>

<p>Of course, Structs are not the solution to every problem. Every tool has its purpose. Structs create public accessors (readers and writers) that could pollute the scope if not managed carefully. Structs are also indadequate when the data structure needs to be flexible since a Struct instance will not accept data that was not explicitly accounted for in the constructor.</p>

<p>But generally, for simple data containers, Structs are preferable over hashes. Structs are faster, carry less overhead, only accept a specific data structure, and are much more powerful thanks to customs methods.[3]</p>

<h2><em>I wanna’a go fast</em></h2>

<p>Structs can also be through of as a hybrid  between classes and hashes. This hybird nature has given them quite a speed advantage over ordinary hashes. For those with the need for speed I set-up a small drag race experiment to test the speed of a Struct vs. a Hash.[4]</p>

<pre><code class="ruby">require ‘benchmark’
include Benchmark
COUNT = 10_000_000

Benchmark.benchmark(CAPTION, 15, FORMAT, “% difference:”) do |x|
  hash_test = x.report(“hash:”) do
    COUNT.times do
      first_programer = {first_name: ‘ada’, last_email: ‘lovelace’}
    end
  end
  struct_test = x.report(“struct:”) do 
    Programer = Struct.new(:first_name, :last_name)
    COUNT.times do
      first_programer = Programer.new(‘ada’,’lovelace’)
    end 
  end
  [((hash_test-struct_test)/hash_test)*100]
end
</code></pre>

<pre><code class="json">                      user     system      total        real
hash:             8.100000   0.020000   8.120000    (8.138051)
struct:           4.270000   0.010000   4.280000    (4.285140)
% difference:     47.283951  50.000000        NaN   (47.344402)
</code></pre>

<p>Over 10 million iterations, a Struct is roughly 47% faster than a hash. Not bad for a relatively unknown Ruby object.</p>

<h2>Deconstructing Ruby</h2>

<p>Ruby inherent simplicity and elegance is made possible by the immense variety of tools the language provides. Structs are only a small tool in the Ruby war chest but a tool you can now confidently wield.</p>

<p>One of the great joys of learning to code is gaining an intimate understanding of your chosen programing language and all the tools it provides. Just like a bicycle or a pen, deeply learning  a pogroming language a can make that language feel less like foreign tool and more like an extension of the mind.</p>

<h3>References &amp; Notes</h3>

<ul>
<li>[1] Metz, Sandi (2012-09-05). Practical Object-Oriented Design in Ruby: An Agile Primer (Addison-Wesley Professional Ruby Series). Pearson Education. Kindle Edition.</li>
<li>[2] <a href="http://ruby-doc.org/core-2.2.0/Struct.html">Official Ruby Documentation (2.2.0) for the Struct class</a></li>
<li>[3] <a href="http://stephaniehoh.github.io/blog/2013/12/28/the-ruby-struct-class/">Stephanie Oh (another great Flatiron School grad) wrote up a great overview of the Struct Class.</a></li>
<li>[4] The comparison uses Ruby’s Benchmark library. I decided to set up the experiment to analyze the actual construction of an instance. The hash test builds an instance of the Hash class and the struct test build an instance of the specific Struct. This seems to mostly closely simulate normal use. An alternate setup iterating over the actual Struct construction would drastically reduce the speed advantage of Structs.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Does .reduce(:+) Work?]]></title>
    <link href="http://walterbm.github.io/blog/2015/06/11/how-does-reduce-plus-work/"/>
    <updated>2015-06-11T02:12:20-04:00</updated>
    <id>http://walterbm.github.io/blog/2015/06/11/how-does-reduce-plus-work</id>
    <content type="html"><![CDATA[<p>How do you sum up all the elements of an array in Ruby?
<code>ruby
[1,2,3,4,5].reduce(:+) # =&gt; 15
</code>
That’s all you need. Simple and elegant. But how does this code actually work?</p>

<p>Unpacking the logic of this tiny line of code require understanding blocks, procs, and the hidden power of symbols.</p>

<h3>Breaking down .reduce</h3>

<p>Without understanding <code>.reduce(:+)</code> a beginner like myself might use <code>.reduce</code> in this familiar implementation:
<code>ruby
[1,2,3,4,5].reduce(0) do |sum, element|
    sum + element
end # =&gt; 15
</code>
The process here is much easier to follow.</p>

<ol>
<li>the <code>[1,2,3,4,5]</code> array calls the <code>.reduce</code> method (or <code>.inject</code>, either method can be used interchangeably).</li>
<li>the <code>.reduce</code> method (part of the Enumerable module in Ruby) allows all the elements of any enumerator object (array, hash, etc) to be combined by applying the logic specified in the block (everything between <code>do</code> and <code>end</code>).</li>
<li>in the example above the block specifies that the elements should be added together through the logic in line 2: <code>sum  + element</code>.</li>
</ol>


<p>So we know Ruby is somehow converting the “plus symbol” into a complete block when <code>:+</code> is passed as an argument.</p>

<p>Usually the argument for a <code>.reduce</code> method sets the initial value for the sum. For example <code>.reduce(11)</code> would start the sum from 11. However, a close reading of the Ruby Docs — all of Ruby’s juicy secrets are in the documentation — reveals that the <code>.reduce</code> method also accepts <em>symbols</em> as arguments.</p>

<pre><code class="ruby">def reduce(starting_value_or_symbol)
  case starting_value_or_symbol
  when Symbol
    # convert symbol into a method block
  else
    # regular reduce() process
  end
</code></pre>

<p>When a symbol is passed as an argument then “each element in the collection will be passed to the named method.”[1] For our purposes the named method for the <code>:+</code> symbol is naturally the <code>.+</code> method.</p>

<pre><code class="ruby">11.+(17) # =&gt; 28
</code></pre>

<p>This notation seems insane so lets create our own summation method to better illustrate the process call.</p>

<pre><code class="ruby">def plus(first_number, second_number)
    first_number + second_number
end
</code></pre>

<p>So passing a <em>symbol</em> to <code>.reduce</code> effectively calls the method with the same name as the symbol. This explains why <code>:-</code> and <code>:*</code> also work.</p>

<pre><code class="ruby">[1,2,3,4,5].reduce(:-) # =&gt; -13
[1,2,3,4,5].reduce(:*) # =&gt; 120
</code></pre>

<p>But this is still not quite reaching the magic of <code>.reduce(:+)</code>. The <code>.reduce</code> method calls on the <code>.+</code> method but how does the <em>symbol</em> <code>:+</code> lead to the <code>.+</code> method?</p>

<h3>The Secret Life of Objects</h3>

<p>Turns out that symbols in Ruby live a secret life. Remove the suit and glasses and ordinary symbols become powerful <strong>Procs</strong> and <strong>Methods</strong>[2]. Ruby’s <code>.to_proc</code> method automatically converts any symbol into proc and <code>method(string_or_symbol)</code> looks up methods matching the string or symbol passes as an argument. Looked-up methods and procs are used directly through the <code>.call</code> method.</p>

<p>So the hidden abstraction of the <code>.reduce</code> method goes through these steps:</p>

<ol>
<li>recognizes when a symbol is passed as an argument</li>
<li>converts the symbol into a proc</li>
<li>calls the proc on the elements of the enumerable.</li>
</ol>


<p>We can use another Enumerator method, like <code>.each</code>, to create an unnecessary code-sandwich that helps reveals the hidden conversion of symbols into procs and looked-up methods.</p>

<pre><code class="ruby">symbol = :+
sum = 0
[1,2,3,4,5].each do |e|
  proc_from_symbol = symbol.to_proc     # converts :+ into a proc
  sum = proc_from_symbol.call(sum,e)    # calls the proc
end
sum # =&gt; 15
</code></pre>

<p>Or if we want to pass the <code>sum</code> method we created above.</p>

<pre><code class="ruby">symbol = :plus  # reference to a custom ‘plus’ method
sum = 0
[1,2,3,4,5].each do |e|
  lookup = method(symbol)   # looks-up a method matching :plus
  sum = lookup.call(sum,e)  # calls the matching method
end
sum # =&gt; 15
</code></pre>

<h3>Quick and Easy</h3>

<p>The mantra of the Ruby language is ‘quick and easy’ and <code>.reduce(:+)</code> is a brilliant line of code that perfectly encapsulates this mindset. Learning more about blocks, proc, and symbols unearths the incredibly power and flexibility of Ruby.</p>

<ul>
<li>[1] <a href="http://ruby-doc.org/core-2.2.0/Enumerable.html#method-i-reduce">Official Ruby Documentation (2.2.0) for the reduce method</a></li>
<li>[2] <a href="http://awaxman11.github.io/blog/2013/08/05/what-is-the-difference-between-a-block/">Adam Waxman (fellow Flatiron School grad) wrote a great post on the differences between blocks, procs, and lambdas in Ruby</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My First Post On Octopress]]></title>
    <link href="http://walterbm.github.io/blog/2015/06/02/my-first-post-on-octopress/"/>
    <updated>2015-06-02T14:12:44-04:00</updated>
    <id>http://walterbm.github.io/blog/2015/06/02/my-first-post-on-octopress</id>
    <content type="html"><![CDATA[<p>First day at The Flatiron School.</p>
]]></content>
  </entry>
  
</feed>
